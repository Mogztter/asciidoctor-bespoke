/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor-bespoke/converter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$tap', '$send', '$const_set', '$freeze', '$register_for', '$[]', '$+', '$map', '$expand_path', '$dup', '$merge', '$new', '$basebackend', '$htmlsyntax', '$delete', '$attributes', '$context', '$level', '$attr?', '$attr']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {};
  if ((($a = ((($b = (($scope.get('Asciidoctor')).$$scope.get('VERSION'))['$==']("1.5.3")) !== false && $b !== nil && $b != null) ? $b : (($scope.get('Asciidoctor')).$$scope.get('VERSION'))['$==']("1.5.4"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    ($a = ($b = (((($scope.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('Html5Converter'))).$tap, $a.$$p = (TMP_1 = function(klass){var self = TMP_1.$$s || this;
if (klass == null) klass = nil;
    klass.$send("remove_const", "SvgPreambleRx");
      return klass.$const_set("SvgPreambleRx", /\A.*?(?=<svg\b)/m);}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b)};
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Bespoke, self = $Bespoke = $module($base, 'Bespoke');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Converter(){};
        var self = $Converter = $klass($base, $super, 'Converter', $Converter);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4;

        Opal.cdecl($scope, 'ProvidedTemplatesDir', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
          return "node_modules/asciidoctor-bespoke/templates"}; return nil; })());

        Opal.cdecl($scope, 'SlimPrettyOpts', $hash2(["pretty", "indent"], {"pretty": true, "indent": false}).$freeze());

        self.$register_for("bespoke");

        Opal.defn(self, '$initialize', TMP_3 = function ːinitialize(backend, opts) {
          var $a, $b, TMP_2, $c, self = this, $iter = TMP_3.$$p, $yield = $iter || nil, template_dirs = nil, custom_template_dirs = nil, engine_opts = nil, template_engine = nil, template_opts = nil, template_converter = nil, html5_converter = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          TMP_3.$$p = null;
          template_dirs = [$scope.get('ProvidedTemplatesDir')];
          if ((($a = (custom_template_dirs = opts['$[]']("template_dirs"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            template_dirs = $rb_plus(template_dirs, ($a = ($b = custom_template_dirs).$map, $a.$$p = (TMP_2 = function(d){var self = TMP_2.$$s || this;
if (d == null) d = nil;
            return Opal.get('File').$expand_path(d)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b))};
          engine_opts = (((($a = opts['$[]']("template_engine_options")) !== false && $a !== nil && $a != null) ? $a : $hash2([], {}))).$dup();
          if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
            template_engine = "jade"};
          template_opts = opts.$merge($hash2(["htmlsyntax", "template_engine", "template_engine_options"], {"htmlsyntax": "html", "template_engine": template_engine, "template_engine_options": engine_opts}));
          template_converter = ((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('TemplateConverter')).$new(backend, template_dirs, template_opts);
          html5_converter = ((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('Html5Converter')).$new(backend, opts);
          ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_3, false)), $a.$$p = null, $a).call($c, backend, template_converter, html5_converter);
          self.$basebackend("html");
          return self.$htmlsyntax("html");
        }, TMP_3.$$arity = -2);

        return (Opal.defn(self, '$convert', TMP_4 = function ːconvert(node, transform, opts) {
          var $a, $b, $c, self = this, $iter = TMP_4.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          if (transform == null) {
            transform = nil;
          }
          if (opts == null) {
            opts = $hash2([], {});
          }
          TMP_4.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if ((($a = ((($b = (node.$attributes().$delete("skip-option"))) !== false && $b !== nil && $b != null) ? $b : node.$context()['$==']("preamble"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ""
          } else if ((($a = ($b = (($c = node.$context()['$==']("section")) ? node.$level()['$=='](1) : node.$context()['$==']("section")), $b !== false && $b !== nil && $b != null ?(node['$attr?']("transform")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self, Opal.find_super_dispatcher(self, 'convert', TMP_4, false)), $a.$$p = null, $a).call($b, node, "slide_" + (node.$attr("transform")), opts)
            } else {
            return ($a = ($c = self, Opal.find_super_dispatcher(self, 'convert', TMP_4, false)), $a.$$p = $iter, $a).apply($c, $zuper)
          };
        }, TMP_4.$$arity = -2), nil) && 'convert';
      })($scope.base, ((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('CompositeConverter')))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.10.1 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("asciidoctor-bespoke/converter");
    return require('asciidoctor-template.js');}
})(Opal);
